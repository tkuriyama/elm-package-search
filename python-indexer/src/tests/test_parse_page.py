import parse_page


################################################################################

TEXT = """
<html><head>\n  <meta charset="UTF-8">\n  <link rel="shortcut icon" size="16x16, 32x32, 48x48, 64x64, 128x128, 256x256" href="/assets/favicon.ico">\n  <title>Maybe - core 1.0.5</title><link rel="canonical" href="/packages/elm/core/latest/Maybe">\n  <link rel="stylesheet" href="/assets/fonts.css">\n  <link rel="stylesheet" href="/assets/style.css">\n  <script src="/artifacts/e98ce62cd7fd9ae7cdce46e999f5c8580febdeba"></script>\n  <script src="/assets/highlight/highlight.pack.js"></script>\n  <link rel="stylesheet" href="/assets/highlight/styles/default.css">\n</head>\n<body><div class="header"><div class="nav"><a href="/" style="text-decoration: none; margin-right: 32px; display: flex; align-items: center;"><svg height="32" viewBox="0 0 600 600"><polygon fill="currentColor" points="0,20 280,300 0,580"></polygon><polygon fill="currentColor" points="20,600 300,320 580,600"></polygon><polygon fill="currentColor" points="320,0 600,0 600,280"></polygon><polygon fill="currentColor" points="20,0 280,0 402,122 142,122"></polygon><polygon fill="currentColor" points="170,150 430,150 300,280"></polygon><polygon fill="currentColor" points="320,300 450,170 580,300 450,430"></polygon><polygon fill="currentColor" points="470,450 600,320 600,580"></polygon></svg><div style="padding-left: 8px;"><div style="line-height: 24px; font-size: 30px;">elm</div><div style="font-size: 12px;">packages</div></div></a><h1>elm<span class="spacey-char">/</span><a href="/packages/elm/core/">core</a><span class="spacey-char">/</span><a href="/packages/elm/core/1.0.5/">1.0.5</a></h1></div></div><div class="header-underbar"></div><div class="center" style="flex: 1 1 0%;"><div class="block-list"><h1 class="block-list-title">Maybe</h1><span class="markdown-block"><div><p> This library fills a bunch of important niches in Elm. A <code>Maybe</code> can help\nyou with optional arguments, error handling, and records with optional fields.</p>\n<h1 id="definition">Definition</h1>\n</div></span><div class="docs-block" id="Maybe"><div class="docs-header"><div><span class="hljs-keyword">type</span> <a href="/packages/elm/core/latest/Maybe#Maybe" style="font-weight: bold;">Maybe</a> a</div><div>    = <span title="Just">Just</span> a</div><div>    | <span title="Nothing">Nothing</span></div></div><div class="docs-comment"><div><p> Represent values that may or may not exist. It can be useful if you have a\nrecord field that is only filled in sometimes. Or if a function takes a value\nsometimes, but does not absolutely need it.</p>\n<pre><code><span class="hljs-comment">-- A person, but maybe we do not know their age.</span>\n<span class="hljs-typedef"><span class="hljs-keyword">type</span> <span class="hljs-keyword">alias</span> <span class="hljs-type">Person</span> =</span>\n    { name : <span class="hljs-type">String</span>\n    , age : <span class="hljs-type">Maybe</span> <span class="hljs-type">Int</span>\n    }\n\n<span class="hljs-title">tom</span> = { name = <span class="hljs-string">"Tom"</span>, age = <span class="hljs-type">Just</span> <span class="hljs-number">42</span> }\n<span class="hljs-title">sue</span> = { name = <span class="hljs-string">"Sue"</span>, age = <span class="hljs-type">Nothing</span> }\n</code></pre></div></div></div><span class="markdown-block"><div><h1 id="common-helpers">Common Helpers</h1>\n</div></span><div class="docs-block" id="withDefault"><div class="docs-header"><div><a href="/packages/elm/core/latest/Maybe#withDefault" style="font-weight: bold;">withDefault</a> <span>:</span> a -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> a -&gt; a</div></div><div class="docs-comment"><div><p> Provide a default value, turning an optional value into a normal\nvalue.  This comes in handy when paired with functions like\n<a href="Dict#get"><code>Dict.get</code></a> which gives back a <code>Maybe</code>.</p>\n<pre><code><span class="hljs-title">withDefault</span> <span class="hljs-number">100</span> (<span class="hljs-type">Just</span> <span class="hljs-number">42</span>)   <span class="hljs-comment">-- 42</span>\n<span class="hljs-title">withDefault</span> <span class="hljs-number">100</span> <span class="hljs-type">Nothing</span>     <span class="hljs-comment">-- 100</span>\n\n<span class="hljs-title">withDefault</span> <span class="hljs-string">"unknown"</span> (<span class="hljs-type">Dict</span>.get <span class="hljs-string">"Tom"</span> <span class="hljs-type">Dict</span>.empty)   <span class="hljs-comment">-- "unknown"</span>\n</code></pre><p><strong>Note:</strong> This can be overused! Many cases are better handled by a <code>case</code>\nexpression. And if you end up using <code>withDefault</code> a lot, it can be a good sign\nthat a <a href="https://guide.elm-lang.org/types/custom_types.html">custom type</a> will clean your code up quite a bit!</p>\n</div></div></div><div class="docs-block" id="map"><div class="docs-header"><div><a href="/packages/elm/core/latest/Maybe#map" style="font-weight: bold;">map</a> <span>:</span> (a -&gt; b) -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> a -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> b</div></div><div class="docs-comment"><div><p> Transform a <code>Maybe</code> value with a given function:</p>\n<pre><code><span class="hljs-title">map</span> sqrt (<span class="hljs-type">Just</span> <span class="hljs-number">9</span>) == <span class="hljs-type">Just</span> <span class="hljs-number">3</span>\n<span class="hljs-title">map</span> sqrt <span class="hljs-type">Nothing</span>  == <span class="hljs-type">Nothing</span>\n\n<span class="hljs-title">map</span> sqrt (<span class="hljs-type">String</span>.toFloat <span class="hljs-string">"9"</span>) == <span class="hljs-type">Just</span> <span class="hljs-number">3</span>\n<span class="hljs-title">map</span> sqrt (<span class="hljs-type">String</span>.toFloat <span class="hljs-string">"x"</span>) == <span class="hljs-type">Nothing</span>\n</code></pre></div></div></div><div class="docs-block" id="map2"><div class="docs-header"><div><a href="/packages/elm/core/latest/Maybe#map2" style="font-weight: bold;">map2</a> <span>:</span> (a -&gt; b -&gt; value) -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> a -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> b -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> value</div></div><div class="docs-comment"><div><p> Apply a function if all the arguments are <code>Just</code> a value.</p>\n<pre><code><span class="hljs-title">map2</span> (+) (<span class="hljs-type">Just</span> <span class="hljs-number">3</span>) (<span class="hljs-type">Just</span> <span class="hljs-number">4</span>) == <span class="hljs-type">Just</span> <span class="hljs-number">7</span>\n<span class="hljs-title">map2</span> (+) (<span class="hljs-type">Just</span> <span class="hljs-number">3</span>) <span class="hljs-type">Nothing</span> == <span class="hljs-type">Nothing</span>\n<span class="hljs-title">map2</span> (+) <span class="hljs-type">Nothing</span> (<span class="hljs-type">Just</span> <span class="hljs-number">4</span>) == <span class="hljs-type">Nothing</span>\n\n<span class="hljs-title">map2</span> (+) (<span class="hljs-type">String</span>.toInt <span class="hljs-string">"1"</span>) (<span class="hljs-type">String</span>.toInt <span class="hljs-string">"123"</span>) == <span class="hljs-type">Just</span> <span class="hljs-number">124</span>\n<span class="hljs-title">map2</span> (+) (<span class="hljs-type">String</span>.toInt <span class="hljs-string">"x"</span>) (<span class="hljs-type">String</span>.toInt <span class="hljs-string">"123"</span>) == <span class="hljs-type">Nothing</span>\n<span class="hljs-title">map2</span> (+) (<span class="hljs-type">String</span>.toInt <span class="hljs-string">"1"</span>) (<span class="hljs-type">String</span>.toInt <span class="hljs-string">"1.3"</span>) == <span class="hljs-type">Nothing</span>\n</code></pre></div></div></div><div class="docs-block" id="map3"><div class="docs-header"><div><a href="/packages/elm/core/latest/Maybe#map3" style="font-weight: bold;">map3</a> <span>:</span> (a -&gt; b -&gt; c -&gt; value) -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> a -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> b -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> c -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> value</div></div><div class="docs-comment"><div></div></div></div><div class="docs-block" id="map4"><div class="docs-header"><div><a href="/packages/elm/core/latest/Maybe#map4" style="font-weight: bold;">map4</a> <span>:</span></div><div>    (a -&gt; b -&gt; c -&gt; d -&gt; value)</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> a</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> b</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> c</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> d</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> value</div></div><div class="docs-comment"><div></div></div></div><div class="docs-block" id="map5"><div class="docs-header"><div><a href="/packages/elm/core/latest/Maybe#map5" style="font-weight: bold;">map5</a> <span>:</span></div><div>    (a -&gt; b -&gt; c -&gt; d -&gt; e -&gt; value)</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> a</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> b</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> c</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> d</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> e</div><div>    -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> value</div></div><div class="docs-comment"><div></div></div></div><span class="markdown-block"><div><h1 id="chaining-maybes">Chaining Maybes</h1>\n</div></span><div class="docs-block" id="andThen"><div class="docs-header"><div><a href="/packages/elm/core/latest/Maybe#andThen" style="font-weight: bold;">andThen</a> <span>:</span> (a -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> b) -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> a -&gt; <a href="/packages/elm/core/latest/Maybe#Maybe">Maybe</a> b</div></div><div class="docs-comment"><div><p> Chain together many computations that may fail. It is helpful to see its\ndefinition:</p>\n<pre><code><span class="hljs-title">andThen</span> : (a -&gt; <span class="hljs-type">Maybe</span> b) -&gt; <span class="hljs-type">Maybe</span> a -&gt; <span class="hljs-type">Maybe</span> b\n<span class="hljs-title">andThen</span> callback maybe =\n    <span class="hljs-keyword">case</span> maybe <span class="hljs-keyword">of</span>\n        <span class="hljs-type">Just</span> value -&gt;\n            callback value\n\n        <span class="hljs-type">Nothing</span> -&gt;\n            <span class="hljs-type">Nothing</span>\n</code></pre><p>This means we only continue with the callback if things are going well. For\nexample, say you need to parse some user input as a month:</p>\n<pre><code><span class="hljs-title">parseMonth</span> : <span class="hljs-type">String</span> -&gt; <span class="hljs-type">Maybe</span> <span class="hljs-type">Int</span>\n<span class="hljs-title">parseMonth</span> userInput =\n    <span class="hljs-type">String</span>.toInt userInput\n      |&gt; andThen toValidMonth\n\n<span class="hljs-title">toValidMonth</span> : <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">Maybe</span> <span class="hljs-type">Int</span>\n<span class="hljs-title">toValidMonth</span> month =\n    <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt;= month &amp;&amp; month &lt;= <span class="hljs-number">12</span> <span class="hljs-keyword">then</span>\n        <span class="hljs-type">Just</span> month\n    <span class="hljs-keyword">else</span>\n        <span class="hljs-type">Nothing</span>\n</code></pre><p>In the <code>parseMonth</code> function, if <code>String.toInt</code> produces <code>Nothing</code> (because\nthe <code>userInput</code> was not an integer) this entire chain of operations will\nshort-circuit and result in <code>Nothing</code>. If <code>toValidMonth</code> results in <code>Nothing</code>,\nagain the chain of computations will result in <code>Nothing</code>.</p>\n</div></div></div></div><div class="pkg-nav"><ul><li><a href="/packages/elm/core/latest/" class="pkg-nav-module">README</a></li><li><a href="/packages/elm/core/latest/about" class="pkg-nav-module">About</a></li><li><a class="pkg-nav-module" href="https://github.com/elm/core/tree/1.0.5">Source</a></li></ul><h2>Modules</h2><input placeholder="Search"><ul><li><a href="/packages/elm/core/latest/Array" class="pkg-nav-module">Array</a></li><li><a href="/packages/elm/core/latest/Basics" class="pkg-nav-module">Basics</a></li><li><a href="/packages/elm/core/latest/Bitwise" class="pkg-nav-module">Bitwise</a></li><li><a href="/packages/elm/core/latest/Char" class="pkg-nav-module">Char</a></li><li><a href="/packages/elm/core/latest/Debug" class="pkg-nav-module">Debug</a></li><li><a href="/packages/elm/core/latest/Dict" class="pkg-nav-module">Dict</a></li><li><a href="/packages/elm/core/latest/List" class="pkg-nav-module">List</a></li><li><a href="/packages/elm/core/latest/Maybe" class="pkg-nav-module" style="font-weight: bold; text-decoration: underline;">Maybe</a></li><li><a href="/packages/elm/core/latest/Platform" class="pkg-nav-module">Platform</a></li><li><a href="/packages/elm/core/latest/Platform-Cmd" class="pkg-nav-module">Platform.Cmd</a></li><li><a href="/packages/elm/core/latest/Platform-Sub" class="pkg-nav-module">Platform.Sub</a></li><li><a href="/packages/elm/core/latest/Process" class="pkg-nav-module">Process</a></li><li><a href="/packages/elm/core/latest/Result" class="pkg-nav-module">Result</a></li><li><a href="/packages/elm/core/latest/Set" class="pkg-nav-module">Set</a></li><li><a href="/packages/elm/core/latest/String" class="pkg-nav-module">String</a></li><li><a href="/packages/elm/core/latest/Task" class="pkg-nav-module">Task</a></li><li><a href="/packages/elm/core/latest/Tuple" class="pkg-nav-module">Tuple</a></li></ul></div></div><div class="footer"><a class="grey-link" href="https://github.com/elm/package.elm-lang.org/">Site Source</a> — © 2012-2020 Evan Czaplicki</div>\n\n</body></html>
"""

################################################################################


class TestParsePage:


    def test_parse_code_names(self):
        """Test parse_code_names with Maybe module example"""

        names_ref = 'Maybe withDefault map map2 map3 map4 map5 andThen'.split(' ')
        names = parse_page.extract_code_names(TEXT)

        for name in names:
            assert name in names_ref
